jmp start                ; Переход к метке start

buffer: reserve 100 bytes   ; Буфер для ввода строки (100 байт)
hello: bytes "Hello World!" 0  ; Нулевая строка для завершения

start:
  lds buffer             ; Загрузка указателя на буфер в %si
  call input_string      ; Вызов функции для ввода строки
  trap

  ; Завершение программы
  push 0                 ; Код выхода 0
  int 0                  ; Вызов выхода из программы

; Функция для ввода строки
input_string:
  mov %cx 100            ; Максимальная длина строки
.next_char:
  int 1                  ; Ввод символа (ASCII значение помещается на стек)
  cop %ax                ; Извлечение значения из стека в %ax
  int $2
  storb %ax              ; Сохранение значения из %ax в [%si]
  cmp %ax $0A            ; Проверка на нулевой байт (конец строки)
  jme .done              ; Если ноль, завершить
  inx %si                ; Переход к следующему байту в буфере
  loop .next_char        ; Повторять, пока не достигнута максимальная длина
.done:
  storb $0               ; Завершение строки нулевым байтом
  ret                    ; Возврат из функции

; Функция puts
puts:
.next_char_puts:
  cmp *%si $0            ; Сравнение текущего символа с нулем
  jme .done_puts         ; Если ноль, завершить
  push *%si              ; Сохранение символа на стеке
  int $02                ; Вывод символа
  inx %si                ; Переход к следующему символу
  jmp .next_char_puts    ; Переход к следующему символу
.done_puts:
  ret                     ; Возврат из функции

