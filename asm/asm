#!/usr/bin/python3

import sys;
import time;

T_INS   = 0x00;
T_INT   = 0x01;
T_LAB   = 0x02;
T_REG   = 0x03;
T_0ID   = 0x04;
T_ADDR  = 0x05;
T_EOL   = 0x06;
T_EOF   = 0xFF;

ASTINS  = 0x00;
ASTEOF  = 0x01;

HUMAN_TOKS = ["INST", "INT", "LABEL", "REG", "NAME", "ADDRESS", "EOL"];
HUMAN_AST  = ["INST", "EOF"];

LET    = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
DIG    = "0123456789";
WHI    = " \r\0\t";
DIGEXT = "0123456789ABCDEF";
KEY1   = [
  "nop"
];
KEY2   = [
  "lda", "ldb", "ldc", "ldd", "lds", "ldg", "push", "int"
];
KEYR   = ["a", "b", "c", "d", "s", "g", "sp", "bp"];
regids = ["a", "b", "c", "d", "s", "g"];

def PrintTokens(toks: list):
  for i in toks:
    if (len(i) == 3):
      print(f"${hex(i[2])[2:].upper():0>4}: {HUMAN_TOKS[i[0]]} {i[1]}");
    elif (len(i) == 2):
      print(f"     : {HUMAN_TOKS[i[0]]} {i[1]}");

def PrintAst(toks: list):
  for i in toks:
    print(f"${hex(i[3])[2:].upper():0>4}: {HUMAN_AST[i[0]]} {i[1]} {i[2]}");

# Lexer:
def Lex(prog: str):
  prog += "\n\0";
  toks = [];
  pos = 0;
  # cpos = 0;
  proglen = len(prog);
  # basemode = 10;
  buf = "";
  while (True):
    if (prog[pos] == "\0"):
      toks.append((T_EOL,));
      toks.append((T_EOF,));
      return toks, 0;
    elif (prog[pos] == ";"):
      pos += 1;
      while (prog[pos] != "\n"):
        pos += 1;
    elif (prog[pos] in WHI):
      pos += 1;
    elif (prog[pos] == "\n"):
      toks.append((T_EOL,));
      pos += 1;
    elif (prog[pos] in "."):
      pos += 1;
      toks.append((T_REG, KEYR.index(prog[pos])));
      toks.append((T_REG, KEYR.index(prog[pos+1])));
      pos += 2;
      cpos += 1;
    elif (prog[pos] in "%"):
      pos += 1;
      while (prog[pos] in LET):
        buf += prog[pos];
        pos += 1;
      pos += 1;
      if (buf in KEYR):
        toks.append((T_REG, KEYR.index(buf)));
        # cpos += 1;
      else:
        print(f"\033[31mUnknown\033[0m register {buf}");
        print(f"\033[33m  Note:\033[0m at position {hex(pos)[2:]:0>4}h");
        print(f"\033[33m  Note:\033[0m at position {pos}");
        return 1;
      buf = "";
    elif (prog[pos] in "#"):
      pos += 1;
      while (prog[pos] in DIG):
        buf += prog[pos];
        pos += 1;
      pos += 1;
      toks.append((T_INT, int(buf, base=10)));
      buf = "";
      # cpos += 1+bytesmode;
    elif (prog[pos] in "^"):
      pos += 1;
      while (prog[pos] in DIGEXT):
        buf += prog[pos];
        pos += 1;
      pos += 1;
      toks.append((T_INT, int(buf, base=16)));
      buf = "";
      # cpos += 1;
    elif (prog[pos] in "$"):
      pos += 1;
      while (prog[pos] in DIGEXT):
        buf += prog[pos];
        pos += 1;
      pos += 1;
      toks.append((T_INT, int(buf, base=16)));
      buf = "";
      # cpos += 1+bytesmode;
      # bytesmode = 1;
    elif (prog[pos] in LET):
      while (prog[pos] in LET+DIG+"-"):
        buf += prog[pos];
        pos += 1;
      if (prog[pos] == ":"):
        toks.append((T_LAB, buf, cpos));
        pos += 1;
      else:
        if (buf in KEY2):
          toks.append((T_INS, buf));
          if (buf == "int"):
            bytesmode = 0;
          # cpos += 2;
        elif (buf == "bytes"):
          toks.append((T_BYT));
          bytesmode = 0;
        elif (buf in KEY1):
          toks.append((T_INS, buf));
          # cpos += 1;
        else:
          toks.append((T_0ID, buf));
          # cpos += 2;
      buf = "";
    else:
      print(f"\033[31mUnknown\033[0m character {hex(ord(prog[pos]))[2:].upper():0>2}");
      print(f"\033[33m  Note:\033[0m at position {hex(pos)[2:]:0>4}h");
      print(f"\033[33m  Note:\033[0m at position {pos}");
      print(f"\033[33m  Note:\033[0m `{prog[pos]}`");
      return [], 1;
  return [], 1;

def FetchLabels(prog: list, disk: bool):
  labs = dict();
  for i in prog:
    if (i[0] == T_LAB):
      labs[i[1]] = i[2]+(0x91EE*disk);
  return labs;

def RemEmpty(prog: str):
  return "\n".join([i for i in prog.split("\n") if i]);

# Parser:
def Parse(toks: list) -> list:
  ast = [];
  pos = 0;
  pc = 0;
  while (toks[pos][0] != T_EOF):
    if (toks[pos][0] == T_INS): # Parse instruction
      if (toks[pos][1] == "lda"): # LDA
        if (toks[pos+1][0] == T_INT): # LDA immediate
          ast.append([ASTINS, "lda:a", toks[pos+1][1], pc]);
          pc += 4;
          pos += 2;
        elif (toks[pos+1][0] == T_REG): # LDA register
          ast.append([ASTINS, "lda:r", toks[pos+1][1], pc]);
          pc += 3;
          pos += 2;
        else:
          print("Unknown lda operand");
          exit(1);
      elif (toks[pos][1] == "ldb"): # LDB
        if (toks[pos+1][0] == T_INT): # LDB immediate
          ast.append([ASTINS, "ldb:a", toks[pos+1][1], pc]);
          pc += 4;
          pos += 2;
        elif (toks[pos+1][0] == T_REG): # LDB register
          ast.append([ASTINS, "ldb:r", toks[pos+1][1], pc]);
          pc += 3;
          pos += 2;
        else:
          print("Unknown ldb operand");
          exit(1);
      elif (toks[pos][1] == "ldc"): # LDC
        if (toks[pos+1][0] == T_INT): # LDC immediate
          ast.append([ASTINS, "ldc:a", toks[pos+1][1], pc]);
          pc += 4;
          pos += 2;
        elif (toks[pos+1][0] == T_REG): # LDC register
          ast.append([ASTINS, "ldc:r", toks[pos+1][1], pc]);
          pc += 3;
          pos += 2;
        else:
          print("Unknown ldc operand");
          exit(1);
      elif (toks[pos][1] == "ldd"): # LDD
        if (toks[pos+1][0] == T_INT): # LDD immediate
          ast.append([ASTINS, "ldd:a", toks[pos+1][1], pc]);
          pc += 4;
          pos += 2;
        elif (toks[pos+1][0] == T_REG): # LDD register
          ast.append([ASTINS, "ldd:r", toks[pos+1][1], pc]);
          pc += 3;
          pos += 2;
        else:
          print("Unknown ldd operand");
          exit(1);
      elif (toks[pos][1] == "lds"): # LDS
        if (toks[pos+1][0] == T_INT): # LDS immediate
          ast.append([ASTINS, "lds:a", toks[pos+1][1], pc]);
          pc += 4;
          pos += 2;
        elif (toks[pos+1][0] == T_REG): # LDS register
          ast.append([ASTINS, "lds:r", toks[pos+1][1], pc]);
          pc += 3;
          pos += 2;
        else:
          print("Unknown lds operand");
          exit(1);
      elif (toks[pos][1] == "ldg"): # LDG
        if (toks[pos+1][0] == T_INT): # LDG immediate
          ast.append([ASTINS, "ldg:a", toks[pos+1][1], pc]);
          pc += 4;
          pos += 2;
        elif (toks[pos+1][0] == T_REG): # LDG register
          ast.append([ASTINS, "ldg:r", toks[pos+1][1], pc]);
          pc += 3;
          pos += 2;
        else:
          print("Unknown ldg operand");
          exit(1);
      elif (toks[pos][1] == "push"): # PUSH
        if (toks[pos+1][0] == T_INT): # PUSH immediate
          ast.append([ASTINS, "push:i", toks[pos+1][1], pc]);
          pc += 4;
          pos += 2;
        elif (toks[pos+1][0] == T_REG): # PUSH immediate
          ast.append([ASTINS, "push:r", toks[pos+1][1], pc]);
          pc += 3;
          pos += 2;
        else:
          print("No.");
          exit(1);
      elif (toks[pos][1] == "int"): # INT
        if (toks[pos+1][0] == T_INT): # Interrupt (byte)
          ast.append([ASTINS, "int:f", toks[pos+1][1], pc]);
          pc += 3;
          pos += 2;
        else:
          print("No.");
          exit(1);
      else:
        print(f"Wtf is {toks[pos][1]}");
        exit(1);
    elif (toks[pos][0] == T_EOL): # Parse EOL
      pos += 1;
    else:
      print(f"Wtf is {toks[pos][0]}");
      exit(1);
  ast.append([ASTEOF, 0, 0, pc]);
  print(f"program size: {ast[-1][3]} bytes");
  return ast;

# Compiler:
def CompileGC16X(prog: list, labs: dict):
  code = bytearray();
  pos = 0;
  while (prog[pos][0] != ASTEOF):
    if (prog[pos][0] == ASTINS):
      if (prog[pos][1] == "lda:a"): # LDA immediate
        code.append(0x66);
        code.append(0x05);
        code.append(prog[pos][2] % 256);
        code.append(prog[pos][2] >> 8);
        pos += 1;
      elif (prog[pos][1] == "lda:r"): # LDA register
        code.append(0x66);
        code.append(0xA5);
        code.append(prog[pos][2]);
        pos += 1;
      elif (prog[pos][1] == "ldb:a"): # LDB immediate
        code.append(0x66);
        code.append(0x06);
        code.append(prog[pos][2] % 256);
        code.append(prog[pos][2] >> 8);
        pos += 1;
      elif (prog[pos][1] == "ldb:r"): # LDB register
        code.append(0x66);
        code.append(0xA6);
        code.append(prog[pos][2]);
        pos += 1;
      elif (prog[pos][1] == "ldc:a"): # LDC immediate
        code.append(0x66);
        code.append(0x07);
        code.append(prog[pos][2] % 256);
        code.append(prog[pos][2] >> 8);
        pos += 1;
      elif (prog[pos][1] == "ldc:r"): # LDC register
        code.append(0x66);
        code.append(0xA7);
        code.append(prog[pos][2]);
        pos += 1;
      elif (prog[pos][1] == "ldd:a"): # LDD immediate
        code.append(0x66);
        code.append(0x08);
        code.append(prog[pos][2] % 256);
        code.append(prog[pos][2] >> 8);
        pos += 1;
      elif (prog[pos][1] == "ldd:r"): # LDD register
        code.append(0x66);
        code.append(0xA8);
        code.append(prog[pos][2]);
        pos += 1;
      elif (prog[pos][1] == "lds:a"): # LDS immediate
        code.append(0x66);
        code.append(0x09);
        code.append(prog[pos][2] % 256);
        code.append(prog[pos][2] >> 8);
        pos += 1;
      elif (prog[pos][1] == "lds:r"): # LDS register
        code.append(0x66);
        code.append(0xA9);
        code.append(prog[pos][2]);
        pos += 1;
      elif (prog[pos][1] == "ldg:a"): # LDG immediate
        code.append(0x66);
        code.append(0x0A);
        code.append(prog[pos][2] % 256);
        code.append(prog[pos][2] >> 8);
        pos += 1;
      elif (prog[pos][1] == "ldg:r"): # LDG register
        code.append(0x66);
        code.append(0xAA);
        code.append(prog[pos][2]);
        pos += 1;
      elif (prog[pos][1] == "push:i"): # PUSH immediate
        code.append(0x0F);
        code.append(0x84);
        code.append(prog[pos][2] % 256);
        code.append(prog[pos][2] >> 8);
        pos += 1;
      elif (prog[pos][1] == "push:r"): # PUSH register
        code.append(0x0F);
        code.append(0x90);
        code.append(prog[pos][2]);
        pos += 1;
      elif (prog[pos][1] == "int:f"): # INT byte
        code.append(0x0F);
        code.append(0xC2);
        code.append(prog[pos][2] % 256);
        pos += 1;
      else:
        print(f"\033[31mUnknown\033[0m instruction {prog[pos][1]}");
        exit(1);
    else:
      print(f"\033[31mUnknown\033[0m token {prog[pos]}");
      print(f"  At position {pos}");
      exit(1);

  return code, 0;

def main(argc: int, argv: list) -> int:
  diskmode = False;
  if (argc == 1):
    print("No arguments given");
    return 1;
  elif (argc == 2):
    print("No binary filename given");
    return 1;
  if (argc == 3):
    progname = argv[1];
    outname = argv[2];
  elif (argc == 4):
    if (argv[1] == "-d"):
      diskmode = True;
    else:
      print(f"\033[31mUnknown\033[0m argument `{argv[1]}`");
      return 1;
    progname = argv[2];
    outname = argv[3];

  with open(progname, "r") as fl:
    src = fl.read();
  src = RemEmpty(src)+"\0";
  tokens, exitcode = Lex(src);
  # PrintTokens(tokens);
  # print(tokens);
  ast = Parse(tokens);
  PrintAst(ast);
  c, exitcode = CompileGC16X(ast, FetchLabels(ast, diskmode));
  with open(outname, "wb") as fl:
    fl.write(c);

  return 0;

sys.exit(main(len(sys.argv), sys.argv));

